<?xml version="1.0" encoding="utf-8"?>
<!-- Created by Leo: http://leoeditor.com/leo_toc.html -->
<leo_file xmlns:leo="http://leoeditor.com/namespaces/leo-python-editor/1.1" >
<leo_header file_format="2" tnodes="0" max_tnode_index="0" clone_windows="0"/>
<globals body_outline_ratio="0.5" body_secondary_ratio="0.5">
	<global_window_position top="50" left="50" height="500" width="700"/>
	<global_log_window_position top="0" left="0" height="0" width="0"/>
</globals>
<preferences/>
<find_panel_settings/>
<vnodes>
<v t="sgoda.20170120150821.1"><vh>Startup</vh>
<v t="sgoda.20170120150821.2" a="E"><vh>@settings</vh>
<v t="sgoda.20170120150821.3"><vh>@string initial_split_orientation = horizontal</vh></v>
<v t="sgoda.20170120150821.4"><vh>@shortcuts</vh></v>
<v t="sgoda.20170120150821.5" a="E"><vh>Buttons</vh>
<v t="sgoda.20170120150821.6"><vh>@button lsdir @color=pink</vh></v>
<v t="sgoda.20170120150821.7"><vh>@button mk_nodes @color=purple</vh></v>
<v t="sgoda.20170120150821.8"><vh>@button mk_clean_nodes @color=cyan</vh></v>
<v t="sgoda.20170120150821.9"><vh>@button mk_path_nodes @color=green</vh></v>
<v t="sgoda.20170120150821.10"><vh>@button node_mute @color=magenta</vh></v>
<v t="sgoda.20170120150821.11"><vh>@button node_unmute @color=green</vh></v>
<v t="sgoda.20170120150821.12"><vh>@button refresh-from-disk</vh></v>
<v t="sgoda.20170120150821.13"><vh>@button gvim-yml-open @color=cream</vh></v>
<v t="sgoda.20170120150821.14"><vh>@button create_node_sections.py color=yellow</vh></v>
</v>
<v t="sgoda.20170120150821.15"><vh>Commands</vh></v>
</v>
</v>
<v t="sgoda.20170120121242.1" a="E"><vh>Node.js</vh>
<v t="sgoda.20170120121242.2"><vh>install</vh>
<v t="sgoda.20170120121242.3"><vh>lib</vh>
<v t="sgoda.20170120121242.4"><vh>node_modules</vh>
<v t="sgoda.20170120121242.5"><vh>npm</vh>
<v t="sgoda.20170120121242.6"><vh>lib</vh></v>
<v t="sgoda.20170120121242.7"><vh>node_modules</vh></v>
<v t="sgoda.20170120121242.8"><vh>doc</vh></v>
<v t="sgoda.20170120121242.9"><vh>changelogs</vh></v>
<v t="sgoda.20170120121242.10"><vh>html</vh></v>
<v t="sgoda.20170120121242.11"><vh>bin</vh></v>
<v t="sgoda.20170120121242.12"><vh>scripts</vh></v>
<v t="sgoda.20170120121242.13"><vh>man</vh></v>
<v t="sgoda.20170120121242.14"><vh>@@edit README.md</vh></v>
<v t="sgoda.20170120121242.15"><vh>@@edit LICENSE</vh></v>
<v t="sgoda.20170120121242.16"><vh>@@edit appveyor.yml</vh></v>
<v t="sgoda.20170120121242.17"><vh>@@edit configure</vh></v>
<v t="sgoda.20170120121242.18"><vh>@@edit Makefile</vh></v>
<v t="sgoda.20170120121242.19"><vh>@@edit cli.js</vh></v>
<v t="sgoda.20170120121242.20"><vh>@@edit CHANGELOG.md</vh></v>
<v t="sgoda.20170120121242.21"><vh>@@edit CONTRIBUTING.md</vh></v>
<v t="sgoda.20170120121242.22"><vh>@@edit make.bat</vh></v>
<v t="sgoda.20170120121242.23"><vh>@@edit AUTHORS</vh></v>
<v t="sgoda.20170120121242.24"><vh>@@edit package.json</vh></v>
</v>
</v>
</v>
<v t="sgoda.20170120121242.25"><vh>etc</vh></v>
<v t="sgoda.20170120121242.26"><vh>@@edit README.md</vh></v>
<v t="sgoda.20170120121242.27"><vh>@@edit LICENSE</vh></v>
<v t="sgoda.20170120121242.28"><vh>include</vh>
<v t="sgoda.20170120121242.29"><vh>node</vh></v>
</v>
<v t="sgoda.20170120121242.30"><vh>bin</vh></v>
<v t="sgoda.20170120121242.31"><vh>@@edit CHANGELOG.md</vh></v>
<v t="sgoda.20170120121242.32"><vh>share</vh></v>
</v>
<v t="sgoda.20170120121242.33" a="E"><vh>Learning</vh>
<v t="sgoda.20170120121242.34" a="E"><vh>Meta</vh>
<v t="sgoda.20170120121242.35"><vh>Python</vh></v>
</v>
<v t="sgoda.20170120121242.36" a="E"><vh>Sandbox</vh>
<v t="sgoda.20170120121242.37" a="E"><vh>Class1</vh>
<v t="sgoda.20170120121242.38"><vh>@clean helloworld.js</vh></v>
<v t="sgoda.20170120121242.39"><vh>Basic HTTP Server</vh>
<v t="sgoda.20170120121242.40"><vh>@clean server.js</vh></v>
<v t="sgoda.20170120121242.41" a="E"><vh>Refactored</vh>
<v t="sgoda.20170120121242.42" a="E"><vh>@clean server2.js</vh>
<v t="sgoda.20170120121242.43"><vh>&lt;&lt;requires&gt;&gt;</vh></v>
<v t="sgoda.20170120121242.44"><vh>&lt;&lt;functions&gt;&gt;</vh></v>
<v t="sgoda.20170120121242.45"><vh>&lt;&lt;server&gt;&gt;</vh></v>
</v>
</v>
</v>
<v t="sgoda.20170120150726.1" a="E"><vh>Application</vh>
<v t="sgoda.20170120151124.1"><vh>@clean index.js</vh>
<v t="sgoda.20170120165414.1"><vh>&lt;&lt;requires&gt;&gt;</vh></v>
<v t="sgoda.20170120165414.2"><vh>&lt;&lt;handlers&gt;&gt;</vh></v>
<v t="sgoda.20170120165414.3"><vh>&lt;&lt;server&gt;&gt;</vh></v>
</v>
<v t="sgoda.20170120151148.1" a="EM"><vh>@clean requestHandlers.js</vh>
<v t="sgoda.20170120154428.1"><vh>&lt;&lt;requires&gt;&gt;</vh></v>
<v t="sgoda.20170120154428.2" a="E"><vh>&lt;&lt;functions&gt;&gt;</vh>
<v t="sgoda.20170120154708.1"><vh>start</vh></v>
<v t="sgoda.20170120154716.1"><vh>upload</vh></v>
<v t="sgoda.20170120154724.1"><vh>show</vh></v>
</v>
<v t="sgoda.20170120154428.3"><vh>&lt;&lt;exports&gt;&gt;</vh></v>
</v>
<v t="sgoda.20170120151157.1"><vh>@clean router.js</vh>
<v t="sgoda.20170120153524.1"><vh>&lt;&lt;functions&gt;&gt;</vh></v>
<v t="sgoda.20170120153524.2"><vh>&lt;&lt;exports&gt;&gt;</vh></v>
</v>
<v t="sgoda.20170120151204.1"><vh>@clean server.js</vh>
<v t="sgoda.20170120151417.1"><vh>&lt;&lt;requires&gt;&gt;</vh></v>
<v t="sgoda.20170120151417.2"><vh>&lt;&lt;functions&gt;&gt;</vh></v>
<v t="sgoda.20170120151417.3"><vh>&lt;&lt;exports&gt;&gt;</vh></v>
</v>
</v>
</v>
</v>
</v>
</v>
</vnodes>
<tnodes>
<t tx="sgoda.20170120121242.1">https://nodejs.org/en
http://www.nodebeginner.org

@path ../</t>
<t tx="sgoda.20170120121242.10">@path html</t>
<t tx="sgoda.20170120121242.11">@path bin</t>
<t tx="sgoda.20170120121242.12">@path scripts</t>
<t tx="sgoda.20170120121242.13">@path man</t>
<t tx="sgoda.20170120121242.14"></t>
<t tx="sgoda.20170120121242.15"></t>
<t tx="sgoda.20170120121242.16"></t>
<t tx="sgoda.20170120121242.17"></t>
<t tx="sgoda.20170120121242.18"></t>
<t tx="sgoda.20170120121242.19"></t>
<t tx="sgoda.20170120121242.2">@path node-v6.9.4-linux-x64</t>
<t tx="sgoda.20170120121242.20"></t>
<t tx="sgoda.20170120121242.21"></t>
<t tx="sgoda.20170120121242.22"></t>
<t tx="sgoda.20170120121242.23"></t>
<t tx="sgoda.20170120121242.24"></t>
<t tx="sgoda.20170120121242.25">@path etc</t>
<t tx="sgoda.20170120121242.26"></t>
<t tx="sgoda.20170120121242.27"></t>
<t tx="sgoda.20170120121242.28">@path include</t>
<t tx="sgoda.20170120121242.29">@path node</t>
<t tx="sgoda.20170120121242.3">@path lib</t>
<t tx="sgoda.20170120121242.30">@path bin</t>
<t tx="sgoda.20170120121242.31"></t>
<t tx="sgoda.20170120121242.32">@path share</t>
<t tx="sgoda.20170120121242.33">@path learning-node.js</t>
<t tx="sgoda.20170120121242.34"></t>
<t tx="sgoda.20170120121242.35"></t>
<t tx="sgoda.20170120121242.36">@path sandbox</t>
<t tx="sgoda.20170120121242.37">@path class1
@language javascript

[sgoda@goldbeef bin]$ node -i
&gt; console.log("Hello World")
Hello World
undefined
&gt; 
(To exit, press ^C again or type .exit)
&gt; 
[sgoda@goldbeef bin]$ </t>
<t tx="sgoda.20170120121242.38">@language javascript

console.log("Hello World from Node.js")</t>
<t tx="sgoda.20170120121242.39">http://www.nodebeginner.org/#building-the-application-stack</t>
<t tx="sgoda.20170120121242.4">@path node_modules</t>
<t tx="sgoda.20170120121242.40">@language javascript

var http = require("http");

http.createServer(
    function(request, response) {
        response.writeHead(200, {"Content-Type": "text/plain"});
        response.write("Hello World");
        response.end();
    }
).listen(8888);

/*
[sgoda@goldbeef class1]$ node server.js 
/work/td/users/sgoda/td/research/nodejs/learning/class1/server.js:6
        response.writehead(200, {"Content-Type": "text/plain"});
                 ^

TypeError: response.writehead is not a function
    at Server.&lt;anonymous&gt; (/work/td/users/sgoda/td/research/nodejs/learning/class1/server.js:6:18)
    at emitTwo (events.js:106:13)
    at Server.emit (events.js:191:7)
    at HTTPParser.parserOnIncoming [as onIncoming] (_http_server.js:546:12)
    at HTTPParser.parserOnHeadersComplete (_http_common.js:99:23)

*/</t>
<t tx="sgoda.20170120121242.41"></t>
<t tx="sgoda.20170120121242.42">@language javascript
&lt;&lt;requires&gt;&gt;

&lt;&lt;functions&gt;&gt;

&lt;&lt;server&gt;&gt;</t>
<t tx="sgoda.20170120121242.43">var http = require("http");</t>
<t tx="sgoda.20170120121242.44">function onRequest(request, response) {
    var metadata = {"Content-Type": "text/plain"};
    
    response.writeHead(200, metadata);
    
    var message = "Hello World from Node.js Server";
    
    response.write(message);
    
    response.end();
}</t>
<t tx="sgoda.20170120121242.45">var server = http.createServer(onRequest);

server.listen(8888);</t>
<t tx="sgoda.20170120121242.5">@path npm</t>
<t tx="sgoda.20170120121242.6">@path lib</t>
<t tx="sgoda.20170120121242.7">@path node_modules</t>
<t tx="sgoda.20170120121242.8">@path doc</t>
<t tx="sgoda.20170120121242.9">@path changelogs</t>
<t tx="sgoda.20170120150726.1">https://github.com/manuelkiessling/nodebeginner.org/tree/master/code/application
@path application


node index.js

module.js:471
    throw err;
    ^

Error: Cannot find module 'formidable'
    at Function.Module._resolveFilename (module.js:469:15)
    at Function.Module._load (module.js:417:25)
    at Module.require (module.js:497:17)
    at require (internal/module.js:20:19)
    at Object.&lt;anonymous&gt; (/work/td/users/sgoda/td/research/nodejs/learning-node.js/sandbox/class1/application/requestHandlers.js:3:19)
    at Module._compile (module.js:570:32)
    at Object.Module._extensions..js (module.js:579:10)
    at Module.load (module.js:487:32)
    at tryModuleLoad (module.js:446:12)
    at Function.Module._load (module.js:438:3)</t>
<t tx="sgoda.20170120150821.1"></t>
<t tx="sgoda.20170120150821.10">@language python

if p.h.startswith('@'):
    p.h = '@' + p.h

c.redraw_now()</t>
<t tx="sgoda.20170120150821.11">@language python

if p.h.startswith('@@'):
    p.h = p.h[1:]

c.redraw_now()</t>
<t tx="sgoda.20170120150821.12">g.command('refresh-from-disk')</t>
<t tx="sgoda.20170120150821.13">@language python

import os

cwd = os.getcwd()
files = [f for f in os.listdir(cwd) if f.endswith('yml')]

if not files:
    raise ValueError("No YAML files to open!")

os.system('gvim -p {0}'.format(' '.join(files)))</t>
<t tx="sgoda.20170120150821.14">@language python

copied_p = p.copy()

SECTION_START = "&lt;" + "&lt;"
SECTION_END = "&gt;" + "&gt;"

for line in p.b.split('\n'):
    if line.startswith('@'):
        continue
    if line.startswith(SECTION_START) and line.endswith(SECTION_END):
        h = line.strip(SECTION_START + SECTION_END)
        child = copied_p.insertAsLastChild()
        child.h = SECTION_START + h + SECTION_END

c.redraw_now()</t>
<t tx="sgoda.20170120150821.15"></t>
<t tx="sgoda.20170120150821.2"></t>
<t tx="sgoda.20170120150821.3"></t>
<t tx="sgoda.20170120150821.4">refresh-from-disk=CTRL+SHIFT+R</t>
<t tx="sgoda.20170120150821.5"></t>
<t tx="sgoda.20170120150821.6">@language python

import os

cwd = os.getcwd()

files = os.listdir(cwd)


g.es("\nContents of {0}\n".format(cwd), color='green')
g.es("\n")
# g.es("\n".join(files))

for entry in files:
    color = 'black'
    suffix = ''

    if os.path.isfile(entry):
        color = 'cyan'
    elif os.path.isdir(entry):
        color = 'blue'
        suffix = '/'
    
    if entry.startswith('.'):
        color = 'gray'
    
    g.es("{0}{1}".format(entry, suffix), color=color)

g.es("\n")</t>
<t tx="sgoda.20170120150821.7">@language python

if p.h.startswith('@button'):
    raise ValueError("Watch what you click!")

copied_p = p.copy()

child_names = (child.h for child in p.children())
URL_BASE = "https://github.anim.odw.com.cn/dmc/{0}"

if not p.b.split():
    raise Exception("""For creating children for the selected node
    The body of the seelcted node must contain the name of the child 
    specified one per line.
    """)

for line in p.b.split():
    if not line:
        continue
    # There could be a path or language directive
    if line.startswith('@'):
        continue

    if line in child_names:
        g.es("Already exists: {0}".format(line), color='red')
        continue

    child = copied_p.insertAsLastChild()
    child.h = line
    child.b = URL_BASE.format(line)

c.redraw()</t>
<t tx="sgoda.20170120150821.8">@language python

if p.h.startswith('@button'):
    raise ValueError("Watch what you click!")

copied_p = p.copy()

#child_names = (child.h for child in p.children())
#URL_BASE = "https://github.anim.odw.com.cn/dmc/{0}"

if not p.b.split():
    raise Exception("""For creating children for the selected node
    The body of the seelcted node must contain the name of the child 
    specified one per line.
    """)

for line in p.b.split('\n'):
    if not line:
        continue
    # There could be a path or language directive
    if line.startswith('@'):
        continue

    #if line in child_names:
    #    g.es("Already exists: {0}".format(line), color='red')
    #    continue

    child = copied_p.insertAsLastChild()
    child.h = '@clean {0}'.format(line)
    #child.b = URL_BASE.format(line)

c.redraw()</t>
<t tx="sgoda.20170120150821.9">@language python

import os

cwd = os.getcwd()

if p.h.startswith('@button'):
    raise ValueError("Watch what you click!")

copied_p = p.copy()

child_names = [child.h for child in p.children()]


for line in os.listdir(cwd):
    # if not line:
        # continue
    
    # There could be a path or language directive
    # if line.startswith('@'):
        # continue
    
    if line in child_names:
       g.es("Already exists: {0}".format(line), color='red')
       continue
    
    # Do not process hidden files and directories
    if line.startswith('.'):
        continue

    child = copied_p.insertAsLastChild()
    
    # Create file nodes
    if os.path.isfile(line):
        if line.endswith(".py"):
            child.h = '@@clean {0}'.format(line)
        elif map(line.endswith, (".yml", ".md")):
            child.h = '@@edit {0}'.format(line)
        elif line.endswith('.png'):
            child.h = '@image {0}'.format(line)
        else:
            child.h = '@@edit {0}'.format(line)
    # Create directory nodes
    elif os.path.isdir(line):
        child.h = line
        child.b = "@path {0}".format(line)

c.redraw()</t>
<t tx="sgoda.20170120151124.1">@language javascript
&lt;&lt;requires&gt;&gt;

&lt;&lt;handlers&gt;&gt;

&lt;&lt;server&gt;&gt;</t>
<t tx="sgoda.20170120151148.1">@language javascript
&lt;&lt;requires&gt;&gt;

&lt;&lt;functions&gt;&gt;

&lt;&lt;exports&gt;&gt;</t>
<t tx="sgoda.20170120151157.1">@language javascript
&lt;&lt;functions&gt;&gt;

&lt;&lt;exports&gt;&gt;</t>
<t tx="sgoda.20170120151204.1">@language javascript
&lt;&lt;requires&gt;&gt;

&lt;&lt;functions&gt;&gt;

&lt;&lt;exports&gt;&gt;</t>
<t tx="sgoda.20170120151417.1">var http = require("http");
var url = require("url");</t>
<t tx="sgoda.20170120151417.2">function start(route, handle) 
{
    function onRequest(request, response) 
    {
        var pathname = url.parse(request.url).pathname;
        
        console.log("Request for " + pathname + " received.");
        
        route(handle, pathname, response, request);
    }
    
    var server = http.createServer(onRequest);
    server.listen(8888);
    
    console.log("Server has started.");
}</t>
<t tx="sgoda.20170120151417.3">exports.start = start;</t>
<t tx="sgoda.20170120153524.1">function route(handle, pathname, response, request)
{
    console.log("About to route a request for " + pathname);
    
    var callback = handle[pathname];
    
    if (typeof callback === 'function') {
        callback(response, request);
    } 
    else {
        console.log("No request handler found for " + pathname);
        
        response.writeHead(404, {"Content-Type": "text/html"});
        response.write("404 Not found");
        response.end();
    }
}</t>
<t tx="sgoda.20170120153524.2">exports.route = route;</t>
<t tx="sgoda.20170120154428.1">var querystring = require("querystring"),
    fs          = require("fs"),
    formidable  = require("formidable");</t>
<t tx="sgoda.20170120154428.2">@others</t>
<t tx="sgoda.20170120154428.3">exports.start = start;
exports.upload = upload;
exports.show = show;</t>
<t tx="sgoda.20170120154708.1" annotate="7d71002855087072696f7269747971014b13550a707269736574646174657102550a323031372d30312d32307103752e" icons="5d71007d71012855026f6e71025505766e6f64657103550577686572657104550e6265666f7265486561646c696e6571055507796f666673657471064b005507786f666673657471074b02550466696c65710858530000002f776f726b2f74642f75736572732f73676f64612f74642f72657365617263682f6c656f2f6769746875622f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f63686b626f78626c6b2e706e677109550478706164710a4b01550474797065710b68085508636c656f49636f6e710c550131710d550772656c50617468710e5812000000636c656f2f63686b626f78626c6b2e706e67710f75612e">function start (response)
{
    console.log("Request handler 'start' was called.");
    
    var body = '&lt;html&gt;' +
        '&lt;head&gt;' + 
        '&lt;meta http-equiv="Content-Type" ' +
        'content="text/html; charset=UTF-8" /&gt;' +
        '&lt;/head&gt;' +
        '&lt;body&gt;' + 
        '&lt;form action="/upload" enctype="multipart/form-data" ' +
        'method="post"&gt;' +
        '&lt;input type="file" name="upload" multiple="multiple"/&gt;' +
        '&lt;input type="submit" value="Upload file" /&gt;' +
        '&lt;/form&gt;' +
        '&lt;/body&gt;' +
        '&lt;/html&gt;';
    
    response.writeHead(200, {"Content-Type": "text/html"});
    response.write(body);
    response.end();
}

</t>
<t tx="sgoda.20170120154716.1" annotate="7d71002855087072696f7269747971014b13550a707269736574646174657102550a323031372d30312d32307103752e" icons="5d71007d71012855026f6e71025505766e6f64657103550577686572657104550e6265666f7265486561646c696e6571055507796f666673657471064b005507786f666673657471074b02550466696c65710858530000002f776f726b2f74642f75736572732f73676f64612f74642f72657365617263682f6c656f2f6769746875622f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f63686b626f78626c6b2e706e677109550478706164710a4b01550474797065710b68085508636c656f49636f6e710c550131710d550772656c50617468710e5812000000636c656f2f63686b626f78626c6b2e706e67710f75612e">function upload (response, request)
{
    console.log("Request handler 'upload' was called.");
    
    var form = new formidable.IncomingForm();
    
    console.log("about to parse");
    
    function form_processor(error, fields, files) 
    {
        console.log("parsing done");
        
        function form_errhandler(err) 
        {
            if (err) {
                fs.unlink("/tmp/test.png");
                fs.rename(files.upload.path, "/tmp/test.png")
            }
        }
        
        fs.rename(files.upload.path, "/tmp/test.png", form_errhandler);
        
        response.writeHead(200, {"Content-Type": "text/html"});
        response.write("received image:&lt;br/&gt;");
        response.write("&lt;img src='/show' /&gt;");
        response.end();
    }
    
    form.parse(request, form_processor);
}

</t>
<t tx="sgoda.20170120154724.1" annotate="7d71002855087072696f7269747971014b13550a707269736574646174657102550a323031372d30312d32307103752e" icons="5d71007d71012855026f6e71025505766e6f64657103550577686572657104550e6265666f7265486561646c696e6571055507796f666673657471064b005507786f666673657471074b02550466696c65710858530000002f776f726b2f74642f75736572732f73676f64612f74642f72657365617263682f6c656f2f6769746875622f6c656f2d656469746f722f6c656f2f49636f6e732f636c656f2f63686b626f78626c6b2e706e677109550478706164710a4b01550474797065710b68085508636c656f49636f6e710c550131710d550772656c50617468710e5812000000636c656f2f63686b626f78626c6b2e706e67710f75612e">function show (response)
{
    console.log("Request handler 'show' was called.");
    
    response.writeHead(200, {"Content-Type": "image/png"});
    
    fs.createReadStream("/tmp/test.png").pipe(response);
}

</t>
<t tx="sgoda.20170120165414.1">var server = require("./server");
var router = require("./router");
var requestHandlers = require("./requestHandlers");</t>
<t tx="sgoda.20170120165414.2">var handle = {};

handle["/"] = requestHandlers.start;
handle["/start"] = requestHandlers.start;
handle["/upload"] = requestHandlers.upload;
handle["/show"] = requestHandlers.show;</t>
<t tx="sgoda.20170120165414.3">server.start(router.route, handle);</t>
</tnodes>
</leo_file>
